/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
import { IGardenTheme } from '../types';
import { Hue } from './getColor';
export type FocusBoxShadowParameters = {
    boxShadow?: string;
    inset?: boolean;
    hue?: Hue;
    shade?: number;
    shadowWidth?: 'sm' | 'md';
    spacerHue?: Hue;
    spacerShade?: number;
    spacerWidth?: null | 'xs' | 'sm';
    theme: IGardenTheme;
};
/**
 * Get a CSS `box-shadow` property value for focus state styling. The `hue` and
 * `shade` are used to determine the color of the focus ring.
 *
 * @param {string} [options.boxShadow] Provides an existing `box-shadow` (a drop shadow, for example) to be retained along with the focus ring
 * @param {boolean} [options.inset=false] Determines whether the `box-shadow` is inset
 * @param {string|Object} [options.hue='primaryHue'] Provides a theme object `palette` hue or `color` key, or any valid CSS color notation
 * @param {number} [options.shade=600] Selects a shade for the given `hue`
 * @param {string} [options.shadowWidth='md'] Provides a theme object `shadowWidth` key for the cumulative width of the `box-shadow`
 * @param {string|Object} [options.spacerHue='background'] Provides a theme object `palette` hue or `color` key, or any valid CSS color notation
 * @param {number} [options.spacerShade=600] Selects a shade for the given `spacerHue`
 * @param {string} [options.spacerWidth='xs'] Provides a theme object `shadowWidth` for the white spacer, or `null` to remove
 * @param {Object} options.theme Provides values used to resolve the desired color
 *
 * @returns A `box-shadow` property value for the given options. Default is a
 * 3px `blue[600]` ring with a 1px white spacer overlay.
 */
export declare const getFocusBoxShadow: ({ boxShadow, inset, hue, shade, shadowWidth, spacerHue, spacerShade, spacerWidth, theme }: FocusBoxShadowParameters) => string;
