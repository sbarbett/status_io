/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { useMemo } from 'react';
import { useUIDSeed } from 'react-uid';
import PropTypes from 'prop-types';

function useField(idPrefix) {
  const seed = useUIDSeed();
  const prefix = useMemo(() => idPrefix || seed(`field_${'2.1.2'}`), [idPrefix, seed]);
  const inputId = `${prefix}--input`;
  const labelId = `${prefix}--label`;
  const hintId = `${prefix}--hint`;
  const messageId = `${prefix}--message`;
  const getLabelProps = function (_temp) {
    let {
      id = labelId,
      htmlFor = inputId,
      ...other
    } = _temp === void 0 ? {} : _temp;
    return {
      id,
      htmlFor,
      'data-garden-container-id': 'containers.field',
      'data-garden-container-version': '2.1.2',
      ...other
    };
  };
  const getInputProps = function (_temp2, _temp3) {
    let {
      id = inputId,
      ...other
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      isDescribed = false,
      hasMessage = false
    } = _temp3 === void 0 ? {} : _temp3;
    return {
      id,
      'aria-labelledby': labelId,
      'aria-describedby': isDescribed || hasMessage ? [].concat(isDescribed ? hintId : [], hasMessage ? messageId : []).join(' ') : null,
      ...other
    };
  };
  const getHintProps = function (_temp4) {
    let {
      id = hintId,
      ...other
    } = _temp4 === void 0 ? {} : _temp4;
    return {
      id,
      ...other
    };
  };
  const getMessageProps = function (_temp5) {
    let {
      id = messageId,
      ...other
    } = _temp5 === void 0 ? {} : _temp5;
    return {
      id,
      ...other
    };
  };
  return {
    getLabelProps,
    getInputProps,
    getHintProps,
    getMessageProps
  };
}

const FieldContainer = _ref => {
  let {
    children,
    render = children,
    id
  } = _ref;
  return React.createElement(React.Fragment, null, render(useField(id)));
};
FieldContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func,
  id: PropTypes.string
};

export { FieldContainer, useField };
