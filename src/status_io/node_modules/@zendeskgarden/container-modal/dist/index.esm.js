/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { useRef } from 'react';
import { useId, composeEventHandlers, KEYS } from '@zendeskgarden/container-utilities';
import { useFocusJail } from '@zendeskgarden/container-focusjail';
import PropTypes from 'prop-types';

const useModal = _ref => {
  let {
    onClose,
    modalRef,
    idPrefix,
    focusOnMount,
    restoreFocus,
    environment
  } = _ref;
  const prefix = useId(idPrefix);
  const titleId = `${prefix}__title`;
  const contentId = `${prefix}__content`;
  const isModalMousedDownRef = useRef(false);
  const closeModal = event => {
    onClose && onClose(event);
  };
  const getBackdropProps = function (_temp) {
    let {
      onMouseUp,
      ...other
    } = _temp === void 0 ? {} : _temp;
    const containerId = 'containers.modal';
    const handleMouseUp = event => {
      const target = event.target;
      const isModalContainer = containerId === target.getAttribute('data-garden-container-id');
      if (!isModalMousedDownRef.current && isModalContainer) {
        closeModal(event);
      }
      isModalMousedDownRef.current = false;
    };
    return {
      onMouseUp: composeEventHandlers(onMouseUp, handleMouseUp),
      'data-garden-container-id': containerId,
      'data-garden-container-version': '1.0.8',
      ...other
    };
  };
  const getModalProps = function (_temp2) {
    let {
      role = 'dialog',
      onKeyDown,
      onMouseDown,
      ...other
    } = _temp2 === void 0 ? {} : _temp2;
    return {
      role: role === null ? undefined : role,
      tabIndex: -1,
      'aria-modal': true,
      'aria-labelledby': titleId,
      'aria-describedby': contentId,
      onMouseDown: composeEventHandlers(onMouseDown, () => {
        isModalMousedDownRef.current = true;
      }),
      onKeyDown: composeEventHandlers(onKeyDown, event => {
        if (event.key === KEYS.ESCAPE) {
          closeModal(event);
        }
      }),
      ...other
    };
  };
  const getTitleProps = function (_temp3) {
    let {
      id = titleId,
      ...other
    } = _temp3 === void 0 ? {} : _temp3;
    return {
      id,
      ...other
    };
  };
  const getContentProps = function (_temp4) {
    let {
      id = contentId,
      ...other
    } = _temp4 === void 0 ? {} : _temp4;
    return {
      id,
      ...other
    };
  };
  const getCloseProps = _ref2 => {
    let {
      onClick,
      ...other
    } = _ref2;
    return {
      onClick: composeEventHandlers(onClick, event => {
        closeModal(event);
      }),
      ...other
    };
  };
  const {
    getContainerProps
  } = useFocusJail({
    containerRef: modalRef,
    focusOnMount,
    restoreFocus,
    environment
  });
  return {
    getBackdropProps,
    getModalProps: props => getContainerProps(getModalProps(props)),
    getTitleProps,
    getContentProps,
    getCloseProps,
    closeModal
  };
};

const ModalContainer = _ref => {
  let {
    children,
    render = children,
    ...options
  } = _ref;
  return React.createElement(React.Fragment, null, render(useModal(options)));
};
ModalContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func,
  onClose: PropTypes.func,
  modalRef: PropTypes.any.isRequired,
  idPrefix: PropTypes.string,
  focusOnMount: PropTypes.bool,
  restoreFocus: PropTypes.bool,
  environment: PropTypes.any
};
ModalContainer.defaultProps = {
  focusOnMount: true,
  restoreFocus: true
};

export { ModalContainer, useModal };
