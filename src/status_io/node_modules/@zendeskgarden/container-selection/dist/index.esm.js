/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { useMemo, createRef, useReducer, useEffect, useCallback } from 'react';
import { getControlledValue, composeEventHandlers, KEYS } from '@zendeskgarden/container-utilities';
import PropTypes from 'prop-types';

const stateReducer = (state, action) => {
  switch (action.type) {
    case 'END':
    case 'HOME':
    case 'FOCUS':
    case 'INCREMENT':
    case 'DECREMENT':
      {
        return {
          ...state,
          focusedValue: action.payload
        };
      }
    case 'MOUSE_SELECT':
      {
        return {
          ...state,
          selectedValue: action.payload,
          focusedValue: undefined
        };
      }
    case 'KEYBOARD_SELECT':
      {
        return {
          ...state,
          selectedValue: action.payload
        };
      }
    case 'EXIT_WIDGET':
      {
        return {
          ...state,
          focusedValue: undefined
        };
      }
    default:
      return state;
  }
};

const useSelection = _ref => {
  let {
    values,
    direction = 'horizontal',
    defaultFocusedValue = values[0],
    defaultSelectedValue,
    rtl,
    selectedValue,
    focusedValue,
    onSelect,
    onFocus
  } = _ref;
  const isSelectedValueControlled = selectedValue !== undefined;
  const isFocusedValueControlled = focusedValue !== undefined;
  const refs = useMemo(() => values.reduce((all, value) => {
    all[value] = createRef();
    return all;
  }, {}), [values]);
  const [state, dispatch] = useReducer(stateReducer, {
    selectedValue,
    focusedValue
  });
  const controlledFocusedValue = getControlledValue(focusedValue, state.focusedValue);
  const controlledSelectedValue = getControlledValue(selectedValue, state.selectedValue);
  useEffect(() => {
    if (controlledFocusedValue !== undefined) {
      const targetRef = refs[controlledFocusedValue];
      targetRef?.current && targetRef.current.focus();
    }
  }, [controlledFocusedValue]);
  useEffect(() => {
    if (selectedValue === undefined && defaultSelectedValue !== undefined) {
      onSelect && onSelect(defaultSelectedValue);
      if (!isSelectedValueControlled) {
        dispatch({
          type: 'KEYBOARD_SELECT',
          payload: defaultSelectedValue
        });
      }
    }
  }, []);
  const getGroupProps = useCallback(function (_temp) {
    let {
      role = 'group',
      ...other
    } = _temp === void 0 ? {} : _temp;
    return {
      role: role === null ? undefined : role,
      'data-garden-container-id': 'containers.selection',
      'data-garden-container-version': '3.0.2',
      ...other
    };
  }, []);
  const getElementProps = _ref2 => {
    let {
      selectedAriaKey = 'aria-selected',
      onFocus: onFocusCallback,
      onKeyDown,
      onClick,
      value,
      ...other
    } = _ref2;
    const isSelected = controlledSelectedValue === value;
    const isFocused = controlledFocusedValue === undefined ? isSelected : controlledFocusedValue === value;
    const tabIndex = isFocused || controlledSelectedValue === undefined && controlledFocusedValue === undefined && value === defaultFocusedValue ? 0 : -1;
    const verticalDirection = direction === 'vertical' || direction === 'both';
    const horizontalDirection = direction === 'horizontal' || direction === 'both';
    const handleFocus = () => {
      onFocus && onFocus(value);
      !isFocusedValueControlled && dispatch({
        type: 'FOCUS',
        payload: value
      });
    };
    const handleClick = () => {
      onSelect && onSelect(value);
      onFocus && onFocus(value);
      !isSelectedValueControlled && dispatch({
        type: 'MOUSE_SELECT',
        payload: value
      });
    };
    const handleKeyDown = event => {
      let nextItem;
      let currentItem;
      if (isFocusedValueControlled) {
        currentItem = values.find(id => focusedValue === id);
      } else {
        currentItem = values.find(id => state.focusedValue === id);
      }
      const onIncrement = () => {
        const nextItemIndex = values.indexOf(currentItem) + 1;
        nextItem = values[nextItemIndex];
        if (!nextItem) {
          nextItem = values[0];
        }
        !isFocusedValueControlled && dispatch({
          type: 'INCREMENT',
          payload: nextItem
        });
        onFocus && onFocus(nextItem);
      };
      const onDecrement = () => {
        const nextItemIndex = values.indexOf(currentItem) - 1;
        nextItem = values[nextItemIndex];
        if (!nextItem) {
          nextItem = values[values.length - 1];
        }
        !isFocusedValueControlled && dispatch({
          type: 'DECREMENT',
          payload: nextItem
        });
        onFocus && onFocus(nextItem);
      };
      const hasModifierKeyPressed = event.ctrlKey || event.metaKey || event.shiftKey || event.altKey;
      if (!hasModifierKeyPressed) {
        if (event.key === KEYS.UP && verticalDirection || event.key === KEYS.LEFT && horizontalDirection) {
          if (rtl && horizontalDirection) {
            onIncrement();
          } else {
            onDecrement();
          }
          event.preventDefault();
        } else if (event.key === KEYS.DOWN && verticalDirection || event.key === KEYS.RIGHT && horizontalDirection) {
          if (rtl && horizontalDirection) {
            onDecrement();
          } else {
            onIncrement();
          }
          event.preventDefault();
        } else if (event.key === KEYS.HOME) {
          const firstItem = values[0];
          !isFocusedValueControlled && dispatch({
            type: 'HOME',
            payload: firstItem
          });
          onFocus && onFocus(firstItem);
          event.preventDefault();
        } else if (event.key === KEYS.END) {
          const lastItem = values[values.length - 1];
          !isFocusedValueControlled && dispatch({
            type: 'END',
            payload: lastItem
          });
          onFocus && onFocus(lastItem);
          event.preventDefault();
        } else if (event.key === KEYS.SPACE || event.key === KEYS.ENTER) {
          onSelect && onSelect(value);
          !isSelectedValueControlled && dispatch({
            type: 'KEYBOARD_SELECT',
            payload: value
          });
          event.preventDefault();
        }
      }
    };
    const onBlur = event => {
      if (event.target.tabIndex === 0) {
        dispatch({
          type: 'EXIT_WIDGET'
        });
        onFocus && onFocus();
      }
    };
    return {
      tabIndex,
      [selectedAriaKey]: selectedAriaKey ? isSelected : undefined,
      ref: refs[value],
      onFocus: composeEventHandlers(onFocusCallback, handleFocus),
      onClick: composeEventHandlers(onClick, handleClick),
      onKeyDown: composeEventHandlers(onKeyDown, handleKeyDown),
      onBlur,
      ...other
    };
  };
  return {
    focusedValue: controlledFocusedValue,
    selectedValue: controlledSelectedValue,
    getElementProps,
    getGroupProps
  };
};

const SelectionContainer = _ref => {
  let {
    children,
    render = children,
    ...options
  } = _ref;
  return React.createElement(React.Fragment, null, render(useSelection(options)));
};
SelectionContainer.defaultProps = {
  direction: 'horizontal'
};
SelectionContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func,
  values: PropTypes.arrayOf(PropTypes.any).isRequired,
  rtl: PropTypes.bool,
  direction: PropTypes.oneOf(['horizontal', 'vertical', 'both']),
  defaultFocusedValue: PropTypes.string,
  defaultSelectedValue: PropTypes.string,
  focusedValue: PropTypes.any,
  selectedValue: PropTypes.any,
  onSelect: PropTypes.func,
  onFocus: PropTypes.func
};

export { SelectionContainer, useSelection };
